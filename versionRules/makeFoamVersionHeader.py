#! /usr/bin/env python3

# This script processses $WM_PRJECT_VERSION and outputs the result to 
# foamVersion4wmles.H
# Code copied from swak4foam with minor modification
# 
# Contributors/Copyright:
#    2012-2018 Bernhard F.W. Gschaider
#    2018      Timofey Mukha

import re
import sys
from os import path,environ

# This part is lifted from six.py (https://pythonhosted.org/six/) to
# make sure that this script runs with Python 2 and Python 3

# True if we are running on Python 3.
PY3 = sys.version_info[0] == 3

if PY3:
    import builtins
    print_ = getattr(builtins, "print")
    del builtins
else:
    def print_(*args, **kwargs):
        """The new-style print function."""
        fp = kwargs.pop("file", sys.stdout)
        if fp is None:
            return
        def write(data):
            if not isinstance(data, basestring):
                data = str(data)
            fp.write(data)
        want_unicode = False
        sep = kwargs.pop("sep", None)
        if sep is not None:
            if isinstance(sep, unicode):
                want_unicode = True
            elif not isinstance(sep, str):
                raise TypeError("sep must be None or a string")
        end = kwargs.pop("end", None)
        if end is not None:
            if isinstance(end, unicode):
                want_unicode = True
            elif not isinstance(end, str):
                raise TypeError("end must be None or a string")
        if kwargs:
            raise TypeError("invalid keyword arguments to print()")
        if not want_unicode:
            for arg in args:
                if isinstance(arg, unicode):
                    want_unicode = True
                    break
        if want_unicode:
            newline = unicode("\n")
            space = unicode(" ")
        else:
            newline = "\n"
            space = " "
        if sep is None:
            sep = space
        if end is None:
            end = newline
        for i, arg in enumerate(args):
            if i:
                write(sep)
            write(arg)
        write(end)


# Parse WM_PROJECT_VERSION to guess which fork and its version, but check
# 'wmake/rules/General/general/rules' first as being more reliable

verString=sys.argv[1]
foamFork = ""

# <openfoam.com> (release or develop branch)
# wmake/rules/General/general/rules has this type of content:
#    WM_VERSION = OPENFOAM(_API|_COM|_PLUS)?=<digits>
reCom = re.compile(r'OPENFOAM(_API|_COM|_PLUS)?\s*=\s*([\d.]+)')
try:
    for line in open(path.join(environ['WM_DIR'],'rules','General','general'), 'r'):
        m = re.search(reCom, line)
        if m:
            foamFork  = "com"
            verString = m.group(2)
            break
except (KeyError, IOError):
    pass

if not foamFork:

    foamFork = "org"  # Fallback value is <openfoam.org>

    if "FOAM_DEV" in environ:
        # foam-extend
        foamFork = "extend"
    elif verString == "com":
        foamFork = "com"
    else:
        # Additional check for openfoam.com (v1606+, v1612, 1706)
        # - only needed for 3.0+ and 1606
        m = re.match(r'v?(\d{4})\+?', verString)
        n = re.match(r'v(3.0)\+', verString)
        if m:
            foamFork  = "com"
            verString = m.group(1)
        if n:
            foamFork  = "com"
            verString = n.group(1)

vParts=verString.split(".")

# Very large to accomodate 4-digit numbering scheme (eg, OpenFOAM-v1706)
of_version_major=2999
of_version_minor=9
of_version_patch="x"

try:
    of_version_major=int(vParts[0])
    of_version_minor=0
except ValueError:
    pass

if len(vParts)>1:
    try:
        of_version_minor=int(vParts[1])
    except ValueError:
        pass

if len(vParts)>2:
    try:
        of_version_patch=int(vParts[2])
    except ValueError:
        pass

if of_version_patch!="x":
    of_version_patch_num=of_version_patch
elif verString in ["dev","com","plus"]:
    of_version_patch=-1
    of_version_patch_num=99
elif len(vParts)==2:
    of_version_patch=0
    of_version_patch_num=0
elif len(vParts)==1 and foamFork=="com":
    of_version_patch=0
    of_version_patch_num=0
else:
    of_version_patch=-1
    of_version_patch_num=98

templateString="""// OpenFOAM versions information
// generated by the Allwmake-script of the libWallModelledLES-distro
#ifndef foamVersion4wmles_H
#define foamVersion4wmles_H

#define FOAM_VERSION4WMLES_FORK  {foamFork}
#define FOAM_VERSION4WMLES_MAJOR {of_version_major}
#define FOAM_VERSION4WMLES_MINOR {of_version_minor}
#define FOAM_VERSION4WMLES_PATCH {of_version_patch}
#define FOAM_VERSION4WMLES_PATCH_NUM {of_version_patch_num}

"""

# Add define for the fork, with some linear versioning
#
# #define FOAM_VERSION4WMLES_IS_<forkName> <major>
# #undef  FOAM_VERSION4WMLES_IS_<forkName> If it is not that fork
#
# Return True if it is that fork, False otherwise
def addFork(fName):
    global templateString

    if foamFork == fName:
        templateString += "#define FOAM_VERSION4WMLES_IS_"+fName.upper()
        if of_version_major > 1 and of_version_major < 2999:
            # information about the major version appears reliable
            templateString += " " + str(of_version_major)+"\n"
        else:
            templateString += " 1\n"
        return True
    else:
        templateString += "#undef  FOAM_VERSION4WMLES_IS_"+fName.upper() + "\n"
        return False


addFork("org")
addFork("extend")

if addFork("com"):
    # OPENFOAM_COM is a 4-digit release date, added after 1606.
    # The release versioning now follows year/month.
    #
    # Released v3.0+ followed by v1606, v1612, ...
    # Provide a release date for v3.0+ (2016-01) to fit this scheme.
    # Later versions can obtain it from the WM_PROJECT_VERSION directly,
    # rely on the OpenFOAM wmake rules to provide it, or use the swak4Foam
    # rules
    if of_version_major == 3:
        templateString += """
// OPENFOAM_COM is the release date (YYMM) as an integer
// OpenFOAM-v3.0+ (released 201601)
#ifndef OPENFOAM_COM
# define OPENFOAM_COM 1601
#endif
"""
    elif of_version_major > 1600:
        templateString += """
// OPENFOAM_COM is the release date (YYMM) as an integer
#ifndef OPENFOAM_COM
# define OPENFOAM_COM {of_version_major}
#endif
"""

# Finish header
templateString += "\n#endif\n"

print_(templateString.format(foamFork=foamFork,
                             of_version_major=of_version_major,
                             of_version_minor=of_version_minor,
                             of_version_patch=of_version_patch,
                             of_version_patch_num=of_version_patch_num))

print_("OpenFOAM-version: Major {of_version_major} Minor {of_version_minor} Patch {of_version_patch} (-1 == x / {of_version_patch_num}) Fork: {foamFork}".format(
    foamFork=foamFork,
    of_version_major=of_version_major,
    of_version_minor=of_version_minor,
    of_version_patch=of_version_patch,
    of_version_patch_num=of_version_patch_num),
      file=sys.stderr)
